package com.example.taskmanagement.service;

import com.example.taskmanagement.controller.GlobalExceptionHandler;
import com.example.taskmanagement.dto.CreateTaskDTO;
import com.example.taskmanagement.dto.TaskDTO;
import com.example.taskmanagement.dto.UpdateTaskDTO;
import com.example.taskmanagement.model.AppUser;
import com.example.taskmanagement.model.Status;
import com.example.taskmanagement.model.Task;
import com.example.taskmanagement.repository.TaskRepository;
import com.example.taskmanagement.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.modelmapper.ModelMapper;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

/**
 * <p><b>–°–µ—Ä–≤–∏—Å –¥–ª—è –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ó–∞–¥–∞—á–∞–º–∏ üìù</b></p>
 *
 * <p>
 *     –°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–∞—á–∞–º–∏:
 *     —Å–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è.
 * </p>
 *
 * <p><b>–ü–æ–¥—Ö–æ–¥ –∫ –û–±—Ä–∞–±–æ—Ç–∫–µ –û—à–∏–±–æ–∫:</b></p>
 * <blockquote>
 *     –°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {@link ResponseStatusException} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 *     –≤—Å–µ—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤").
 *     –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è "—á–∏—Å—Ç—ã–º–∏", –¥–µ–ª–µ–≥–∏—Ä—É—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ
 *     HTTP-–æ—Ç–≤–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫—É Spring —á–µ—Ä–µ–∑ {@link GlobalExceptionHandler}.
 *     –ö–∞–∂–¥–∞—è –±–∏–∑–Ω–µ—Å-–æ—à–∏–±–∫–∞ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
 * </blockquote>
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class TaskService {

    private final TaskRepository taskRepository;
    private final UserRepository userRepository;
    private final UserService userService;
    private final ModelMapper modelMapper;

    private static final String TASK_NOT_FOUND_CODE = "TASK-001";
    private static final String TASK_ACCESS_DENIED_CODE = "TASK-002";
    private static final String USER_NOT_FOUND_CODE = "USR-002";

    /**
     * <p><b>–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É ‚ûï</b></p>
     * <p>
     *     –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –ø—Ä–∏–≤—è–∑—ã–≤–∞—è –µ–µ –∫ —Ç–µ–∫—É—â–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–≤—Ç–æ—Ä–∞.
     *     –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ –ø–æ email.
     * </p>
     *
     * @param createTaskDTO DTO –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) email –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
     * @return –°–æ–∑–¥–∞–Ω–Ω–∞—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å {@link Task}.
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>401 UNAUTHORIZED</b> (`AUTH-001`): –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (—ç—Ç–æ—Ç —Å–ª—É—á–∞–π –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è Spring Security —Ä–∞–Ω—å—à–µ).</li>
     *             <li><b>404 NOT_FOUND</b> (`USR-002`): –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π) –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</li>
     *         </ul>
     */
    @Transactional
    public TaskDTO createTask(CreateTaskDTO createTaskDTO) {

        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated()) {
            log.debug("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.");
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "AUTH-001: –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.");
        }

        String authorEmail = authentication.getName();
        AppUser author = userRepository.findByEmail(authorEmail)
                .orElseThrow(() -> {
                    log.debug("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", authorEmail);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND, USER_NOT_FOUND_CODE + ": –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                });

        Task task = modelMapper.map(createTaskDTO, Task.class);
        task.setAuthor(author);
        task.setCreatedAt(LocalDateTime.now());
        task.setUpdatedAt(LocalDateTime.now());

        if (createTaskDTO.getExecutorUsername() != null && !createTaskDTO.getExecutorUsername().isEmpty()) {
            AppUser executor = userRepository.findByEmail(createTaskDTO.getExecutorUsername())
                    .orElseThrow(() -> {
                        log.debug("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å email '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", createTaskDTO.getExecutorUsername());
                        return new ResponseStatusException(HttpStatus.NOT_FOUND, USER_NOT_FOUND_CODE + ": –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å email '" + createTaskDTO.getExecutorUsername() + "' –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    });
            task.setExecutor(executor);
        } else {
            task.setExecutor(null);
        }

        Task savedTask = taskRepository.save(task);
        log.info("‚úÖ –ó–∞–¥–∞—á–∞ '{}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ (ID: {}) –∞–≤—Ç–æ—Ä–æ–º '{}'.", savedTask.getTitle(), savedTask.getId(), authorEmail);

        return convertToDTO(savedTask);
    }

    /**
     * <p><b>–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É ‚úèÔ∏è</b></p>
     * <p>
     *     –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ—Ä—É –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ—ë –¥–∞–Ω–Ω—ã–µ.
     * </p>
     *
     * @param updateTaskDTO DTO —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
     * @param taskId ID –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
     * @return –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å {@link Task}.
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>404 NOT_FOUND</b> (`TASK-001`): –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</li>
     *             <li><b>404 NOT_FOUND</b> (`USR-002`): –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (–µ—Å–ª–∏ –æ–Ω –º–µ–Ω—è–µ—Ç—Å—è) –Ω–µ –Ω–∞–π–¥–µ–Ω.</li>
     *             <li><b>403 FORBIDDEN</b> (`TASK-002`): –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∑–∞–¥–∞—á–∏.</li>
     *         </ul>
     */
    @Transactional
    public TaskDTO editTask(UpdateTaskDTO updateTaskDTO, long taskId) {
        log.info("üì¢ –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å ID: {}", taskId);

        Task task = taskRepository.findById(taskId)
                .orElseThrow(() -> {
                    log.debug("‚ùå –ó–∞–¥–∞—á–∞ —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", taskId);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND, String.format(TASK_NOT_FOUND_CODE + ": –ó–∞–¥–∞—á–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", taskId));
                });

        AppUser currentUser = getAuthenticatedUser();

        if (!task.getAuthor().getId().equals(currentUser.getId())) {
            log.error("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{}' (ID: {}) –ø—ã—Ç–∞–ª—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É ID: {}, –∫ –∫–æ—Ç–æ—Ä–æ–π —É –Ω–µ–≥–æ –Ω–µ—Ç –ø—Ä–∞–≤. –ê–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏: '{}' (ID: {}).",
                    currentUser.getEmail(), currentUser.getId(), taskId, task.getAuthor().getEmail(), task.getAuthor().getId());
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, TASK_ACCESS_DENIED_CODE + ": –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.");
        }

        modelMapper.map(updateTaskDTO, task);

        if (updateTaskDTO.getExecutorUsername() != null && !updateTaskDTO.getExecutorUsername().isEmpty()) {
            AppUser newExecutor = userRepository.findByEmail(updateTaskDTO.getExecutorUsername())
                    .orElseThrow(() -> {
                        log.debug("‚ùå –ù–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å email '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ID: {}.",
                                updateTaskDTO.getExecutorUsername(), taskId);
                        return new ResponseStatusException(HttpStatus.NOT_FOUND, USER_NOT_FOUND_CODE + ": –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å email '" + updateTaskDTO.getExecutorUsername() + "' –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    });
            task.setExecutor(newExecutor);
        } else if (updateTaskDTO.getExecutorUsername() != null && updateTaskDTO.getExecutorUsername().isEmpty()) {
            task.setExecutor(null);
        }

        task.setUpdatedAt(LocalDateTime.now());
        Task updatedTask = taskRepository.save(task);
        log.info("‚úÖ –ó–∞–¥–∞—á–∞ —Å ID: {} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '{}'.", updatedTask.getId(), currentUser.getEmail());

        return convertToDTO(updatedTask);
    }

    /**
     * <p><b>–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É üóëÔ∏è</b></p>
     * <p>
     *     –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ—Ä—É –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–∏—Ç—å –µ—ë –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
     * </p>
     *
     * @param taskId ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>404 NOT_FOUND</b> (`TASK-001`): –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</li>
     *             <li><b>403 FORBIDDEN</b> (`TASK-002`): –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∑–∞–¥–∞—á–∏.</li>
     *         </ul>
     */
    @Transactional
    public void deleteTask(long taskId) {
        Task task = taskRepository.findById(taskId)
                .orElseThrow(() -> {
                    log.debug("‚ùå –ó–∞–¥–∞—á–∞ —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", taskId);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND, String.format(TASK_NOT_FOUND_CODE + ": –ó–∞–¥–∞—á–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", taskId));
                });

        AppUser currentUser = getAuthenticatedUser();

        if (!task.getAuthor().getId().equals(currentUser.getId())) {
            log.debug("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{}' (ID: {}) –ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ID: {}, –∫ –∫–æ—Ç–æ—Ä–æ–π —É –Ω–µ–≥–æ –Ω–µ—Ç –ø—Ä–∞–≤. –ê–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏: '{}' (ID: {}).",
                    currentUser.getEmail(), currentUser.getId(), taskId, task.getAuthor().getEmail(), task.getAuthor().getId());
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, TASK_ACCESS_DENIED_CODE + ": –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.");
        }

        taskRepository.deleteById(taskId);
        log.info("‚úÖ –ó–∞–¥–∞—á–∞ —Å ID: {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '{}'.", taskId, currentUser.getEmail());
    }

    /**
     * <p><b>–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á üìã</b></p>
     * <p>
     *     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ.
     *     –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º,
     *     –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞.
     * </p>
     *
     * @return {@link List} –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π {@link Task}.
     */
    @Transactional(readOnly = true)
    public List<TaskDTO> getAllTasks() {
        log.debug("üì¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á.");
        List<Task> tasks = taskRepository.findAllWithComments();
        return tasks.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    /**
     * <p><b>–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ä–æ–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è üóìÔ∏è</b></p>
     * <p>
     *     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç.
     * </p>
     *
     * @param startDate –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
     * @param endDate –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
     * @return {@link List} DTO –æ–±—ä–µ–∫—Ç–æ–≤ {@link TaskDTO}, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –∑–∞–¥–∞—á–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
     */
    @Transactional(readOnly = true)
    public List<TaskDTO> getTasksBetweenDates(LocalDate startDate, LocalDate endDate) {
        log.debug("üì¢ –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á —Å–æ —Å—Ä–æ–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–∂–¥—É {} –∏ {}.", startDate, endDate);
        if (startDate.isAfter(endDate)) {
            log.debug("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ {} –ø–æ—Å–ª–µ –∫–æ–Ω–µ—á–Ω–æ–π {}.", startDate, endDate);
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "TASK-003: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã.");
        }
        List<Task> tasks = taskRepository.findByDueDateBetween(startDate, endDate);
        log.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –∑–∞–¥–∞—á —Å–æ —Å—Ä–æ–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–∂–¥—É {} –∏ {}.", tasks.size(), startDate, endDate);
        return tasks.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    /**
     * <p><b>–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ ID üÜî</b></p>
     * <p>
     *     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É –ø–æ –µ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
     * </p>
     *
     * @param taskId ID –∑–∞–¥–∞—á–∏.
     * @return –ù–∞–π–¥–µ–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å {@link Task}.
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>404 NOT_FOUND</b> (`TASK-001`): –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</li>
     *         </ul>
     */
    @Transactional(readOnly = true)
    public TaskDTO getTaskById(long taskId) {
        log.debug("üì¢ –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ ID: {}", taskId);
        Task task = taskRepository.findById(taskId)
                .orElseThrow(() -> {
                    log.debug("‚ùå –ó–∞–¥–∞—á–∞ —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", taskId);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND, String.format(TASK_NOT_FOUND_CODE + ": –ó–∞–¥–∞—á–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", taskId));
                });
        return convertToDTO(task);
    }

    /**
     * <p><b>–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–≤—Ç–æ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å) üßë‚Äçüíª</b></p>
     * <p>
     *     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏–±–æ –∞–≤—Ç–æ—Ä–æ–º, –ª–∏–±–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.
     * </p>
     *
     * @param email Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @return {@link List} DTO –æ–±—ä–µ–∫—Ç–æ–≤ {@link TaskDTO}, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>404 NOT_FOUND</b> (`USR-002`): –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.</li>
     *         </ul>
     */
    @Transactional(readOnly = true)
    public List<TaskDTO> getAllTasksByUser(String email) {
        log.debug("üì¢ –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: '{}'.", email);
        AppUser user = userService.getUserByEmail(email);
        List<Task> tasks = taskRepository.findByAuthorOrExecutor(user, user);
        log.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}'.", tasks.size(), email);
        return tasks.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    /**
     * <p><b>–ù–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚û°Ô∏è</b></p>
     * <p>
     *     –ù–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞–¥–∞—á—É —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. **–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.**
     *     –ü—Ä–∏–Ω–∏–º–∞–µ—Ç ID –∑–∞–¥–∞—á–∏ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
     * </p>
     *
     * @param taskId ID –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
     * @param executorId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞.
     * @return –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å {@link Task}.
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>404 NOT_FOUND</b> (`TASK-001`): –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</li>
     *             <li><b>404 NOT_FOUND</b> (`USR-002`): –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</li>
     *             <li><b>403 FORBIDDEN</b> (`TASK-002`): –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∑–∞–¥–∞—á–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞).</li>
     *         </ul>
     */
    @Transactional
    public TaskDTO assignTask(Long taskId, Long executorId) {
        log.debug("üì¢ –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ID: {} –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ID: {}", taskId, executorId);

        Task task = taskRepository.findById(taskId)
                .orElseThrow(() -> {
                    log.debug("‚ùå –ó–∞–¥–∞—á–∞ —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.", taskId);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND, String.format(TASK_NOT_FOUND_CODE + ": –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å ID: %d.", taskId));
                });

        AppUser executor = userRepository.findById(executorId)
                .orElseThrow(() -> {
                    log.debug("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ID: {}.", executorId, taskId);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND, String.format(USER_NOT_FOUND_CODE + ": –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å ID: %d.", executorId));
                });

        task.setExecutor(executor);
        Task assignedTask = taskRepository.save(task);
        log.info("‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {}.", taskId, executorId);
        return convertToDTO(assignedTask);
    }

    /**
     * <p><b>–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ üîÑ</b></p>
     * <p>
     *     –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ—Ä—É –∏–ª–∏ —Ç–µ–∫—É—â–µ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë —Å—Ç–∞—Ç—É—Å.
     * </p>
     *
     * @param taskId ID –∑–∞–¥–∞—á–∏.
     * @param newStatus –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.
     * @return –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å {@link Task}.
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>404 NOT_FOUND</b> (`TASK-001`): –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</li>
     *             <li><b>403 FORBIDDEN</b> (`TASK-002`): –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∑–∞–¥–∞—á–∏.</li>
     *             <li><b>400 BAD_REQUEST</b> (`TASK-004`): –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å.</li>
     *         </ul>
     */
    @Transactional
    public TaskDTO setStatus(long taskId, Status newStatus) {
        log.debug("üì¢ –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ ID: {} –Ω–∞ '{}'.", taskId, newStatus);

        Task task = taskRepository.findById(taskId)
                .orElseThrow(() -> {
                    log.debug("‚ùå –ó–∞–¥–∞—á–∞ —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.", taskId);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND, String.format(TASK_NOT_FOUND_CODE + ": –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å ID: %d.", taskId));
                });

        AppUser currentUser = getAuthenticatedUser();

        boolean isAuthor = task.getAuthor().getId().equals(currentUser.getId());
        boolean isExecutor = (task.getExecutor() != null && task.getExecutor().getId().equals(currentUser.getId()));

        if (!isAuthor && !isExecutor) {
            log.warn("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{}' (ID: {}) –ø—ã—Ç–∞–ª—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ID: {}, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∏ –∞–≤—Ç–æ—Ä–æ–º, –Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.",
                    currentUser.getEmail(), currentUser.getId(), taskId);
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, TASK_ACCESS_DENIED_CODE + ": –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.");
        }

        task.setStatus(newStatus);
        task.setUpdatedAt(LocalDateTime.now());
        Task updatedTask = taskRepository.save(task);
        log.info("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å ID {} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '{}'.", taskId, newStatus, currentUser.getEmail());
        return convertToDTO(updatedTask);
    }

    /**
     * <p><b>[ADMIN] –£–¥–∞–ª—è–µ—Ç –ª—é–±—É—é –∑–∞–¥–∞—á—É –ø–æ ID üí£</b></p>
     * <p>
     *     –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—Ä–æ–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ ADMIN (–∫–æ—Ç–æ—Ä–∞—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞).
     *     –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
     * </p>
     *
     * @param taskId ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>404 NOT_FOUND</b> (`TASK-001`): –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</li>
     *         </ul>
     */
    @Transactional
    public void deleteAnyTask(Long taskId) {
        log.info("üëë –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª—é–±–æ–π –∑–∞–¥–∞—á–∏ —Å ID: {} (–∞–¥–º–∏–Ω).", taskId);
        if (!taskRepository.existsById(taskId)) {
            log.error("‚ùå –ó–∞–¥–∞—á–∞ —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.", taskId);
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, String.format(TASK_NOT_FOUND_CODE + ": –ó–∞–¥–∞—á–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", taskId));
        }
        taskRepository.deleteById(taskId);
        log.info("‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ (–∞–¥–º–∏–Ω).", taskId);
    }


    /**
     * <p><b>–ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É (PATCH) ‚úèÔ∏è</b></p>
     * <p>
     *     –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ—Ä—É –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è.
     *     –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤ DTO —Ä–∞–≤–Ω—ã `null`, –Ω–µ –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã –≤ —Å—É—â–Ω–æ—Å—Ç–∏.
     * </p>
     *
     * @param updateTaskDTO DTO —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
     * @param taskId ID –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
     * @return –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DTO –∑–∞–¥–∞—á–∏.
     * @throws ResponseStatusException ...
     */
    @Transactional
    public TaskDTO patchTask(UpdateTaskDTO updateTaskDTO, long taskId) {
        log.info("üì¢ –ü–æ–ø—ã—Ç–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (PATCH) –∑–∞–¥–∞—á–∏ —Å ID: {}", taskId);

        Task task = taskRepository.findById(taskId)
                .orElseThrow(() -> {
                    log.debug("‚ùå –ó–∞–¥–∞—á–∞ —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", taskId);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND, String.format(TASK_NOT_FOUND_CODE + ": –ó–∞–¥–∞—á–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", taskId));
                });

        AppUser currentUser = getAuthenticatedUser();

        if (!task.getAuthor().getId().equals(currentUser.getId())) {
            log.error("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{}' (ID: {}) –ø—ã—Ç–∞–ª—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É ID: {}, –∫ –∫–æ—Ç–æ—Ä–æ–π —É –Ω–µ–≥–æ –Ω–µ—Ç –ø—Ä–∞–≤.",
                    currentUser.getEmail(), currentUser.getId(), taskId);
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, TASK_ACCESS_DENIED_CODE + ": –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.");
        }

        if (updateTaskDTO.getTitle() != null) {
            task.setTitle(updateTaskDTO.getTitle());
        }
        if (updateTaskDTO.getDescription() != null) {
            task.setDescription(updateTaskDTO.getDescription());
        }
        if (updateTaskDTO.getStatus() != null) {
            task.setStatus(updateTaskDTO.getStatus());
        }
        if (updateTaskDTO.getPriority() != null) {
            task.setPriority(updateTaskDTO.getPriority());
        }
        if (updateTaskDTO.getDueDate() != null) {
            task.setDueDate(updateTaskDTO.getDueDate());
        }

        if (updateTaskDTO.getExecutorUsername() != null) {
            if (updateTaskDTO.getExecutorUsername().isEmpty()) {
                task.setExecutor(null);
            } else {
                AppUser newExecutor = userRepository.findByEmail(updateTaskDTO.getExecutorUsername())
                        .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, USER_NOT_FOUND_CODE + ": –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å email '" + updateTaskDTO.getExecutorUsername() + "' –Ω–µ –Ω–∞–π–¥–µ–Ω."));
                task.setExecutor(newExecutor);
            }
        }

        task.setUpdatedAt(LocalDateTime.now());
        Task updatedTask = taskRepository.save(task);
        log.info("‚úÖ –ó–∞–¥–∞—á–∞ —Å ID: {} —É—Å–ø–µ—à–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '{}'.", updatedTask.getId(), currentUser.getEmail());

        return convertToDTO(updatedTask);
    }

    /**
     * <p><b>[ADMIN] –û–±–Ω–æ–≤–ª—è–µ—Ç –ª—é–±—É—é –∑–∞–¥–∞—á—É –ø–æ ID üëë‚úèÔ∏è</b></p>
     * <p>
     *     –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª—é–±–æ–π –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë ID. –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤,
     *     –ø–æ–∑–≤–æ–ª—è—è –∏–º –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∞–≤—Ç–æ—Ä–∞.
     * </p>
     *
     * @param taskId ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
     * @param updateTaskDTO DTO —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
     * @return –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å {@link Task}.
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>404 NOT_FOUND</b> (`TASK-001`): –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</li>
     *             <li><b>404 NOT_FOUND</b> (`USR-002`): –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (–µ—Å–ª–∏ –æ–Ω –º–µ–Ω—è–µ—Ç—Å—è) –Ω–µ –Ω–∞–π–¥–µ–Ω.</li>
     *         </ul>
     */
    @Transactional
    public Task updateAnyTask(Long taskId, UpdateTaskDTO updateTaskDTO) {
        log.info("üëë –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—é–±–æ–π –∑–∞–¥–∞—á–∏ —Å ID: {} (–∞–¥–º–∏–Ω).", taskId);

        Task task = taskRepository.findById(taskId)
                .orElseThrow(() -> {
                    log.error("‚ùå –ó–∞–¥–∞—á–∞ —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", taskId);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND, String.format(TASK_NOT_FOUND_CODE + ": –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å ID: %d.", taskId));
                });

        modelMapper.map(updateTaskDTO, task);

        if (updateTaskDTO.getExecutorUsername() != null && !updateTaskDTO.getExecutorUsername().isEmpty()) {
            AppUser newExecutor = userRepository.findByEmail(updateTaskDTO.getExecutorUsername())
                    .orElseThrow(() -> {
                        log.error("‚ùå –ù–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å email '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ID: {}.",
                                updateTaskDTO.getExecutorUsername(), taskId);
                        return new ResponseStatusException(HttpStatus.NOT_FOUND, USER_NOT_FOUND_CODE + ": –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å email '" + updateTaskDTO.getExecutorUsername() + "' –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    });
            task.setExecutor(newExecutor);
        } else if (updateTaskDTO.getExecutorUsername() != null && updateTaskDTO.getExecutorUsername().isEmpty()) {
            task.setExecutor(null);
        }

        task.setUpdatedAt(LocalDateTime.now());
        Task updatedTask = taskRepository.save(task);
        log.info("‚úÖ –ó–∞–¥–∞—á–∞ —Å ID {} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–∞–¥–º–∏–Ω).", taskId);
        return updatedTask;
    }


    /**
     * <p><b>–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏, –ø–æ—Ä—É—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é üßë‚ÄçüíªüìÑ</b></p>
     * <p>
     *     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.
     * </p>
     *
     * @param appUser –°—É—â–Ω–æ—Å—Ç—å {@link AppUser} —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @return {@link List} DTO –æ–±—ä–µ–∫—Ç–æ–≤ {@link TaskDTO}, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –∑–∞–¥–∞—á–∏.
     */
    @Transactional(readOnly = true)
    public List<TaskDTO> getMyTasks(AppUser appUser) {
        log.debug("üì¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á, –ø–æ—Ä—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '{}' (ID: {}).", appUser.getEmail(), appUser.getId());
        List<Task> tasks = taskRepository.findByExecutor(appUser);
        return tasks.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    /**
     * <p><b>–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É üìä</b></p>
     * <p>
     *     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.
     * </p>
     *
     * @param status –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `TO_DO`, `IN_PROGRESS`, `DONE`).
     * @return {@link List} —Å—É—â–Ω–æ—Å—Ç–µ–π {@link Task}.
     */
    @Transactional(readOnly = true)
    public List<TaskDTO> getTasksByStatus(Status status) {
        log.debug("üì¢ –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É: '{}'.", status);
        List<Task> tasks = taskRepository.findByStatus(status);
        return tasks.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    /**
     * <p><b>–ü–æ–ª—É—á–∞–µ—Ç ID –≤—Å–µ—Ö –∑–∞–¥–∞—á üî¢</b></p>
     * <p>
     *     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ID –∑–∞–¥–∞—á, —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ —Å–∏—Å—Ç–µ–º–µ.
     * </p>
     *
     * @return {@link List} {@link Long} - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ID –∑–∞–¥–∞—á.
     */
    @Transactional(readOnly = true)
    public List<Long> getAllTaskIds() {
        log.debug("üì¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö ID –∑–∞–¥–∞—á.");
        return taskRepository.getAllTaskIds();
    }

    /**
     * <p><b>–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏) üîé</b></p>
     * <p>
     *     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –≤ {@link Specification}.
     *     –ü–æ–∑–≤–æ–ª—è–µ—Ç –≥–∏–±–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É).
     * </p>
     *
     * @param spec {@link Specification<Task>} - –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
     * @return {@link List} DTO –æ–±—ä–µ–∫—Ç–æ–≤ {@link TaskDTO}, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É.
     */
    @Transactional(readOnly = true)
    public List<TaskDTO> getTasksByFilter(Specification<Task> spec) {
        log.debug("üì¢ –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.");

        List<Task> tasks = taskRepository.findAll(spec);

        return tasks.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    /**
     * <p><b>–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º –∑–∞–¥–∞—á–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ DTO) ‚úÖ</b></p>
     * <p>
     *     –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
     *     –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π email'–æ–º, –∞–≤—Ç–æ—Ä–æ–º –∑–∞–¥–∞—á–∏, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ DTO.
     * </p>
     *
     * @param taskDto {@link TaskDTO} - DTO –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
     * @param email Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
     * @return `true`, –µ—Å–ª–∏ email –≤ DTO —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º email'–æ–º, –∏–Ω–∞—á–µ `false`.
     */
    public boolean isTaskAuthor(TaskDTO taskDto, String email) {
        if (taskDto.getAuthor() == null) {
            return false;
        }
        return taskDto.getAuthor().equals(email);
    }

    /**
     * <p><b>–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î üßë‚Äçüíª</b></p>
     * <p>
     *     –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ {@link AppUser}
     *     –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
     * </p>
     *
     * @return –°—É—â–Ω–æ—Å—Ç—å {@link AppUser} —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>401 UNAUTHORIZED</b> (`AUTH-001`): –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.</li>
     *             <li><b>404 NOT_FOUND</b> (`USR-002`): –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î (–æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π).</li>
     *         </ul>
     */
    private AppUser getAuthenticatedUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated() || "anonymousUser".equals(authentication.getName())) {
            log.error("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "AUTH-001: –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.");
        }
        String username = authentication.getName();
        return userRepository.findByEmail(username)
                .orElseThrow(() -> {
                    log.error("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", username);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND, USER_NOT_FOUND_CODE + ": –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                });
    }

    /**
     * <p><b>–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤ DTO ‚ÜîÔ∏è</b></p>
     * <p>
     *     –ò—Å–ø–æ–ª—å–∑—É–µ—Ç {@link ModelMapper} –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è {@link Task} –≤ {@link TaskDTO}.
     * </p>
     *
     * @param task –°—É—â–Ω–æ—Å—Ç—å {@link Task}.
     * @return {@link TaskDTO} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.
     */
    private TaskDTO convertToDTO(Task task) {
        TaskDTO dto = modelMapper.map(task, TaskDTO.class);
        if (task.getAuthor() != null) {
            dto.setAuthor(task.getAuthor().getEmail());
        }
        if (task.getExecutor() != null) {
            dto.setExecutor(task.getExecutor().getEmail());
        }
        return dto;
    }
}