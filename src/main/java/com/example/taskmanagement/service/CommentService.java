package com.example.taskmanagement.service;

import com.example.taskmanagement.dto.CommentDTO;
import com.example.taskmanagement.model.AppUser;
import com.example.taskmanagement.model.Comment;
import com.example.taskmanagement.model.Task;
import com.example.taskmanagement.repository.CommentRepository;
import com.example.taskmanagement.repository.TaskRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.modelmapper.ModelMapper;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;
import java.util.stream.Collectors;

/**
 * <p><b>–°–µ—Ä–≤–∏—Å –¥–ª—è –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ üí¨</b></p>
 *
 * <p>
 *     –°–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏:
 *     —Å–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ.
 * </p>
 *
 * <p><b>–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:</b></p>
 * <ul>
 *     <li><b>–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è:</b> –í—Å—è –ª–æ–≥–∏–∫–∞, –≤–∫–ª—é—á–∞—è –ø–æ–∏—Å–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤,
 *     —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞.</li>
 *     <li><b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> –°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 *     –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏).</li>
 *     <li><b>DTO-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å:</b> –í—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç DTO, –∞ –Ω–µ —Å—É—â–Ω–æ—Å—Ç–∏,
 *     —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ —Å–∫—Ä—ã—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö.</li>
 * </ul>
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class CommentService {

    private final CommentRepository commentRepository;
    private final TaskRepository taskRepository;
    private final UserService userService;
    private final ModelMapper modelMapper;

    private static final String TASK_NOT_FOUND_CODE = "TASK-001";
    private static final String COMMENT_NOT_FOUND_CODE = "CMT-001";
    private static final String COMMENT_ACCESS_DENIED_CODE = "CMT-002";

    /**
     * <p><b>–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ ‚ûï</b></p>
     *
     * @param taskId ID –∑–∞–¥–∞—á–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
     * @param commentText –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
     * @param authorEmail Email –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (—Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
     * @return DTO —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>404 NOT_FOUND</b> (`TASK-001`): –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</li>
     *             <li><b>404 NOT_FOUND</b> (`USR-002`): –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.</li>
     *         </ul>
     */
    @Transactional
    public CommentDTO createComment(long taskId, String commentText, String authorEmail) {
        log.info("üì¢ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ ID: {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '{}'", taskId, authorEmail);

        Task task = taskRepository.findById(taskId)
                .orElseThrow(() -> {
                    log.error("‚ùå –ó–∞–¥–∞—á–∞ —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.", taskId);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND, TASK_NOT_FOUND_CODE + ": –ó–∞–¥–∞—á–∞ —Å ID " + taskId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                });

        AppUser author = userService.getUserByEmail(authorEmail);

        Comment comment = new Comment();
        comment.setText(commentText);
        comment.setTask(task);
        comment.setAppUser(author);

        Comment savedComment = commentRepository.save(comment);
        log.info("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID: {} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ ID: {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '{}'.", savedComment.getId(), taskId, authorEmail);

        return convertToDTO(savedComment);
    }

    /**
     * <p><b>–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ‚úèÔ∏è</b></p>
     * <p>–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–æ–∂–µ—Ç –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.</p>
     *
     * @param commentId ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
     * @param newText –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
     * @param editorEmail Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—ã—Ç–∞—é—â–µ–≥–æ—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
     * @return DTO –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>404 NOT_FOUND</b> (`CMT-001`): –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.</li>
     *             <li><b>403 FORBIDDEN</b> (`CMT-002`): –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.</li>
     *         </ul>
     */
    @Transactional
    public CommentDTO updateComment(long commentId, String newText, String editorEmail) {
        log.info("üì¢ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ID: {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '{}'.", commentId, editorEmail);

        Comment comment = commentRepository.findById(commentId)
                .orElseThrow(() -> {
                    log.error("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", commentId);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND, COMMENT_NOT_FOUND_CODE + ": –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID " + commentId + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                });

        if (!comment.getAppUser().getEmail().equals(editorEmail)) {
            log.warn("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{}' –ø—ã—Ç–∞–ª—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: {}).", editorEmail, commentId);
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, COMMENT_ACCESS_DENIED_CODE + ": –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.");
        }

        comment.setText(newText);
        Comment updatedComment = commentRepository.save(comment);
        log.info("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID: {} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.", updatedComment.getId());

        return convertToDTO(updatedComment);
    }

    /**
     * <p><b>–£–¥–∞–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üóëÔ∏è</b></p>
     * <p>–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–≥—É—Ç –µ–≥–æ —É–¥–∞–ª–∏—Ç—å.</p>
     *
     * @param commentId ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
     * @param userEmail Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–ø–æ–ª–Ω—è—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ.
     * @param userRoles –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "ROLE_ADMIN").
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>404 NOT_FOUND</b> (`CMT-001`): –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.</li>
     *             <li><b>403 FORBIDDEN</b> (`CMT-002`): –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.</li>
     *         </ul>
     */
    @Transactional
    public void deleteComment(long commentId, String userEmail, List<String> userRoles) {
        log.info("üì¢ –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ID: {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '{}'.", commentId, userEmail);

        Comment comment = commentRepository.findById(commentId)
                .orElseThrow(() -> {
                    log.debug("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", commentId);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND, COMMENT_NOT_FOUND_CODE + ": –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID " + commentId + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                });

        boolean isAuthor = comment.getAppUser().getEmail().equals(userEmail);
        boolean isAdmin = userRoles.contains("ROLE_ADMIN");

        if (!isAuthor && !isAdmin) {
            log.debug("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{}' –ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: {}) –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", userEmail, commentId);
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, COMMENT_ACCESS_DENIED_CODE + ": –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —á—É–∂–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.");
        }

        commentRepository.delete(comment);
        log.info("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID: {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", commentId);
    }

    /**
     * <p><b>–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ üìã</b></p>
     *
     * @param taskId ID –∑–∞–¥–∞—á–∏.
     * @return –°–ø–∏—Å–æ–∫ DTO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
     * @throws ResponseStatusException
     *         <ul>
     *             <li><b>404 NOT_FOUND</b> (`TASK-001`): –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</li>
     *         </ul>
     */
    @Transactional(readOnly = true)
    public List<CommentDTO> getCommentsByTaskId(long taskId) {
        log.debug("üì¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ ID: {}.", taskId);
        if (!taskRepository.existsById(taskId)) {
            log.debug("‚ùå –ó–∞–¥–∞—á–∞ —Å ID '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.", taskId);
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, TASK_NOT_FOUND_CODE + ": –ó–∞–¥–∞—á–∞ —Å ID " + taskId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        }
        List<Comment> comments = commentRepository.findByTaskIdWithAuthor(taskId);
        log.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ ID: {}.", comments.size(), taskId);
        return comments.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    /**
     * <p><b>–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ DTO ‚ÜîÔ∏è</b></p>
     * <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç {@link ModelMapper} –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è {@link Comment} –≤ {@link CommentDTO},
     * –∞ —Ç–∞–∫–∂–µ –º–∞–ø–ø–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ `AppUser` –∏ `Task` –≤ –∏—Ö DTO-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è.</p>
     *
     * @param comment –°—É—â–Ω–æ—Å—Ç—å {@link Comment}.
     * @return {@link CommentDTO} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
     */
    private CommentDTO convertToDTO(Comment comment) {
        return modelMapper.map(comment, CommentDTO.class);
    }
}