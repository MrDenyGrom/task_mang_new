package com.example.taskmanagement.controller;

import com.example.taskmanagement.config.UserDetail;
import com.example.taskmanagement.dto.CreateTaskDTO;
import com.example.taskmanagement.dto.TaskDTO;
import com.example.taskmanagement.dto.UpdateTaskDTO;
import com.example.taskmanagement.model.AppUser;
import com.example.taskmanagement.model.Status;
import com.example.taskmanagement.model.Task;
import com.example.taskmanagement.service.TaskService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.persistence.criteria.JoinType;
import jakarta.persistence.criteria.Predicate;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.time.LocalDate;
import java.util.List;

/**
 * <p><b>–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ó–∞–¥–∞—á–∞–º–∏ üéØ</b></p>
 * <p>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∑–∞–¥–∞—á.</p>
 * <p>
 *     –≠—Ç–æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 *     <ul>
 *         <li>–°–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á.</li>
 *         <li>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º.</li>
 *         <li>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á.</li>
 *         <li>–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º (ID, —Å—Ç–∞—Ç—É—Å, –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–æ —Ñ–∏–ª—å—Ç—Ä—É).</li>
 *         <li>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–¥–∞—á–∞–º–∏.</li>
 *     </ul>
 * </p>
 */
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/tasks")
@Slf4j
@Tag(name = "2. üéØ –ó–∞–¥–∞—á–∏", description = """
    ### API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏.
    *   **–°–æ–∑–¥–∞–Ω–∏–µ** –∏ **—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ** —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ ‚ûï‚úèÔ∏èüóëÔ∏è.
    *   **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ** –∑–∞–¥–∞—á –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ‚û°Ô∏è.
    *   **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞** –∑–∞–¥–∞—á üîÑ.
    *   **–ü—Ä–æ—Å–º–æ—Ç—Ä** –∑–∞–¥–∞—á –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º üîé.
    *   **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ** –ª—é–±—ã—Ö –∑–∞–¥–∞—á (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–ª–∏ `ADMIN`) üëë.
    """)
public class TaskController {

    private final TaskService taskService;

    private static final String ERROR_400_INVALID_DATA_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 400,
                "error": "Bad Request",
                "message": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—è –∑–∞–ø—Ä–æ—Å–∞.",
                "details": [
                    {
                        "field": "title",
                        "message": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                    }
                ],
                "path": "/api/tasks/create"
            }
            """;

    private static final String ERROR_400_INVALID_DATE_RANGE_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 400,
                "error": "Bad Request",
                "message": "TASK-003: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã.",
                "path": "/api/tasks/between-dates"
            }
            """;

    private static final String ERROR_401_UNAUTHORIZED_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 401,
                "error": "Unauthorized",
                "message": "AUTH-001: –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.",
                "path": "/api/tasks/create"
            }
            """;

    private static final String ERROR_403_ACCESS_DENIED_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 403,
                "error": "Forbidden",
                "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
                "path": "/api/tasks/edit/1"
            }
            """;

    private static final String ERROR_403_TASK_SPECIFIC_ACCESS_DENIED_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 403,
                "error": "Forbidden",
                "message": "TASK-002: –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.",
                "path": "/api/tasks/edit/1"
            }
            """;

    private static final String ERROR_404_TASK_NOT_FOUND_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 404,
                "error": "Not Found",
                "message": "TASK-001: –ó–∞–¥–∞—á–∞ —Å ID 999 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                "path": "/api/tasks/getById/999"
            }
            """;

    private static final String ERROR_404_USER_NOT_FOUND_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 404,
                "error": "Not Found",
                "message": "USR-002: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email 'nonexistent@example.com' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                "path": "/api/tasks/create"
            }
            """;

    private static final String ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 500,
                "error": "Internal Server Error",
                "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
                "path": "/api/tasks/getAll"
            }
            """;


    @Operation(
            summary = "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É",
            description = """
            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–∏—Å—Ç–µ–º–µ. –ê–≤—Ç–æ—Ä–æ–º –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–µ–∫—É—â–∏–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
            –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (`executorUsername`), —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ –ø–æ email –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á–µ.
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "201",
                    description = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = Task.class))
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_400_INVALID_DATA_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π JWT —Ç–æ–∫–µ–Ω. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `AUTH-001`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –£–∫–∞–∑–∞–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á–∏ (–ø–æ email) –Ω–µ –Ω–∞–π–¥–µ–Ω. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `USR-002`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_404_USER_NOT_FOUND_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @PostMapping("/create")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<TaskDTO> createTask(
            @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏.", required = true,
                    content = @Content(schema = @Schema(implementation = CreateTaskDTO.class))
            )
            @Valid @RequestBody CreateTaskDTO taskDTO
    ) {
        TaskDTO createdTask = taskService.createTask(taskDTO);
        URI location = URI.create(String.format("/api/tasks/%s", createdTask.getId()));
        return ResponseEntity.created(location).body(createdTask);
    }


    @Operation(
            summary = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É",
            description = """
            –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏.
            **–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.**
            –ü–æ–ª—è, –Ω–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø—Ä–æ—Å–µ, –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
            –ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –ø–µ—Ä–µ–¥–∞–π—Ç–µ –ø–æ–ª–µ `executorUsername` —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π `""`.
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = TaskDTO.class))
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_400_INVALID_DATA_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "403",
                    description = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∑–∞–¥–∞—á–∏. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-002`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_403_TASK_SPECIFIC_ACCESS_DENIED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-001` –∏–ª–∏ `USR-002`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = {
                            @ExampleObject(name = "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", value = ERROR_404_TASK_NOT_FOUND_EXAMPLE),
                            @ExampleObject(name = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", value = ERROR_404_USER_NOT_FOUND_EXAMPLE)
                    })
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @PatchMapping("/edit/{id}")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<TaskDTO> patchTask(
            @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.", required = true,
                    content = @Content(schema = @Schema(implementation = UpdateTaskDTO.class))
            )
            @Valid @RequestBody UpdateTaskDTO taskDTO,
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", required = true, example = "1")
            @PathVariable long id
    ) {
        TaskDTO updatedTask = taskService.patchTask(taskDTO, id);
        return ResponseEntity.ok(updatedTask);
    }

    @Operation(
            summary = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É",
            description = """
            –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø–æ –µ—ë ID.
            **–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –µ—ë —É–¥–∞–ª–∏—Ç—å.** –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "204",
                    description = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –ø—É—Å—Ç–æ–µ."
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "403",
                    description = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∑–∞–¥–∞—á–∏. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-002`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_403_TASK_SPECIFIC_ACCESS_DENIED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-001`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_404_TASK_NOT_FOUND_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @DeleteMapping("/delete/{id}")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<Void> deleteTask(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", required = true, example = "1")
            @PathVariable long id
    ) {
        taskService.deleteTask(id);
        return ResponseEntity.noContent().build();
    }

    @Operation(
            summary = "üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á",
            description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ.
            """
            ,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = Task.class, type = "array"))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @GetMapping("/getAll")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<List<TaskDTO>> getAllTasks() {
        List<TaskDTO> tasks = taskService.getAllTasks();
        return ResponseEntity.ok(tasks);
    }

    @Operation(
            summary = "üÜî –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID",
            description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –ø–æ –µ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
            """
            ,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = Task.class))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-001`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_404_TASK_NOT_FOUND_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @GetMapping("/getById/{taskId}")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<TaskDTO> getTaskById(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏.", required = true, example = "1")
            @PathVariable long taskId
    ) {
        TaskDTO task = taskService.getTaskById(taskId);
        return ResponseEntity.ok(task);
    }

    @Operation(
            summary = "üìä –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É",
            description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `WAITING`, `IN_PROGRESS`).
            """
            ,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = Task.class, type = "array"))
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_400_INVALID_DATA_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @GetMapping("/status/{status}")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<List<TaskDTO>> getTasksByStatus(
            @Parameter(description = "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.", required = true, example = "WAITING", schema = @Schema(implementation = Status.class))
            @PathVariable Status status
    ) {
        List<TaskDTO> tasks = taskService.getTasksByStatus(status);
        return ResponseEntity.ok(tasks);
    }

    @Operation(
            summary = "‚û°Ô∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            description = """
            –ù–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞–¥–∞—á—É –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
            **–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.**
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = Task.class))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "403",
                    description = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∑–∞–¥–∞—á–∏. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-002`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_403_TASK_SPECIFIC_ACCESS_DENIED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ó–∞–¥–∞—á–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-001` –∏–ª–∏ `USR-002`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = {
                            @ExampleObject(name = "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", value = ERROR_404_TASK_NOT_FOUND_EXAMPLE),
                            @ExampleObject(name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", value = ERROR_404_USER_NOT_FOUND_EXAMPLE)
                    })
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @PostMapping("/{taskId}/assign/{userId}")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<TaskDTO> assignTask(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏.", required = true, example = "1")
            @PathVariable Long taskId,
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞.", required = true, example = "2")
            @PathVariable Long userId,
            @AuthenticationPrincipal UserDetail userDetail
    ) {
        if (userDetail == null) {
            throw new org.springframework.security.access.AccessDeniedException("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        }

        AppUser currentUser = userDetail.appUser();

        TaskDTO taskDto = taskService.getTaskById(taskId);

        if (!taskService.isTaskAuthor(taskDto, currentUser.getEmail())) {
            log.warn("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{}' (ID: {}) –ø—ã—Ç–∞–ª—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É ID: {}, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –µ–µ –∞–≤—Ç–æ—Ä–æ–º.",
                    currentUser.getEmail(), currentUser.getId(), taskId);
            throw new org.springframework.security.access.AccessDeniedException(
                    "TASK-002: –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –µ–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å.");
        }

        TaskDTO assignedTask = taskService.assignTask(taskId, userId);
        return ResponseEntity.ok(assignedTask);
    }


    @Operation(
            summary = "üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏",
            description = """
            –ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.
            **–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ç–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë —Å—Ç–∞—Ç—É—Å.**
            """
            ,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = TaskDTO.class))
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –Ω–µ–ª–æ–≥–∏—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_400_INVALID_DATA_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "403",
                    description = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∏ –∞–≤—Ç–æ—Ä–æ–º, –Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∑–∞–¥–∞—á–∏. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-002`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_403_TASK_SPECIFIC_ACCESS_DENIED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-001`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_404_TASK_NOT_FOUND_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @PutMapping("/{id}/status")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<TaskDTO> setStatus(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏.", required = true, example = "1")
            @PathVariable long id,
            @Parameter(description = "–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏.", required = true, example = "IN_PROGRESS", schema = @Schema(implementation = Status.class))
            @RequestParam Status status
    ) {
        TaskDTO updatedTask = taskService.setStatus(id, status);
        return ResponseEntity.ok(updatedTask);
    }

    @Operation(
            summary = "üóìÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏",
            description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (`dueDate`) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
            """
            ,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ –¥–∞—Ç–∞–º —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = TaskDTO.class, type = "array"))
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-003`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_400_INVALID_DATE_RANGE_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @GetMapping("/between-dates")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<List<TaskDTO>> getTasksBetweenDates(
            @Parameter(description = "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (YYYY-MM-DD).", required = true, example = "2025-06-30")
            @RequestParam("start") @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate startDate,
            @Parameter(description = "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (YYYY-MM-DD).", required = true, example = "2025-07-25")
            @RequestParam("end") @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate endDate) {
        List<TaskDTO> tasks = taskService.getTasksBetweenDates(startDate, endDate);
        return ResponseEntity.ok(tasks);
    }

    @Operation(
            summary = "üßë‚Äçüíª –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–≤—Ç–æ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)",
            description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –≥–¥–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏–±–æ –∞–≤—Ç–æ—Ä–æ–º, –ª–∏–±–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.
            """
            ,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = TaskDTO.class, type = "array"))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `USR-002`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_404_USER_NOT_FOUND_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @GetMapping("/by-user/{email}")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<List<TaskDTO>> getAllTasksByUser(
            @Parameter(description = "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å.", required = true, example = "user@example.com")
            @PathVariable String email
    ) {
        List<TaskDTO> tasks = taskService.getAllTasksByUser(email);
        return ResponseEntity.ok(tasks);
    }

    @Operation(
            summary = "üî¢ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ ID –∑–∞–¥–∞—á",
            description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–¥–∞—á, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ —Å–∏—Å—Ç–µ–º–µ.
            """
            ,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –°–ø–∏—Å–æ–∫ ID –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(type = "array"))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @GetMapping("/all-ids")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<List<Long>> getAllTaskIds() {
        List<Long> taskIds = taskService.getAllTaskIds();
        return ResponseEntity.ok(taskIds);
    }

    @Operation(
            summary = "üîé –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É (–ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É)",
            description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞).
            –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
            """
            ,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ —Ñ–∏–ª—å—Ç—Ä—É —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = TaskDTO.class, type = "array"))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @GetMapping("/by-filter")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<List<TaskDTO>> getTasksByFilter(
            @Parameter(description = "–ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞).", example = "–æ—Ç—á–µ—Ç")
            @RequestParam(required = false) String title
    ) {
        Specification<Task> spec = (root, query, criteriaBuilder) -> {
            assert query != null;
            if (query.getResultType() != Long.class && query.getResultType() != long.class) {
                root.fetch("author", JoinType.LEFT);
                root.fetch("executor", JoinType.LEFT);
                root.fetch("comments", JoinType.LEFT);
            }

            Predicate predicate = criteriaBuilder.conjunction();
            if (title != null && !title.isEmpty()) {
                String lowerTitle = title.toLowerCase();
                predicate = criteriaBuilder.and(predicate, criteriaBuilder.like(criteriaBuilder.lower(root.get("title")), "%" + lowerTitle + "%"));
            }

            return predicate;
        };

        List<TaskDTO> tasks = taskService.getTasksByFilter(spec);
        return ResponseEntity.ok(tasks);
    }

    @Operation(
            summary = "üßë‚ÄçüíªüìÑ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏, –ø–æ—Ä—É—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.
            """
            ,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ—Ä—É—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = TaskDTO.class, type = "array"))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `USR-002`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_404_USER_NOT_FOUND_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @GetMapping("/my")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<List<TaskDTO>> getMyTask(@AuthenticationPrincipal UserDetail userDetail) {
        AppUser currentUser = userDetail.appUser();
        log.info("üì¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á, –ø–æ—Ä—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '{}' (ID: {}).", currentUser.getEmail(), currentUser.getId());
        List<TaskDTO> tasks = taskService.getMyTasks(currentUser);
        return ResponseEntity.ok(tasks);
    }

    @Operation(
            summary = "üëë –£–¥–∞–ª–∏—Ç—å –ª—é–±—É—é –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN)",
            description = """
            –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–æ–ª—å—é `ADMIN` –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å –ª—é–±—É—é –∑–∞–¥–∞—á—É –ø–æ –µ—ë ID,
            –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –µ—ë –∞–≤—Ç–æ—Ä–∞.
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "204",
                    description = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –ø—É—Å—Ç–æ–µ."
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "403",
                    description = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –£ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–∏ `ADMIN`.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_403_ACCESS_DENIED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-001`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_404_TASK_NOT_FOUND_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @DeleteMapping("/admin/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deleteAnyTask(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", required = true, example = "1")
            @PathVariable Long id
    ) {
        log.info("üì¢ –í—ã–∑–æ–≤ DELETE /api/tasks/admin/{}: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∞–¥–º–∏–Ω).", id);
        taskService.deleteAnyTask(id);
        return ResponseEntity.noContent().build();
    }

    @Operation(
            summary = "üëë –û–±–Ω–æ–≤–∏—Ç—å –ª—é–±—É—é –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN)",
            description = """
            –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–æ–ª—å—é `ADMIN` –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª—é–±–æ–π –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë ID,
            –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –µ—ë –∞–≤—Ç–æ—Ä–∞.
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = Task.class))
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_400_INVALID_DATA_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "403",
                    description = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –£ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–∏ `ADMIN`.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_403_ACCESS_DENIED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-001` –∏–ª–∏ `USR-002`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = {
                            @ExampleObject(name = "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", value = ERROR_404_TASK_NOT_FOUND_EXAMPLE),
                            @ExampleObject(name = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", value = ERROR_404_USER_NOT_FOUND_EXAMPLE)
                    })
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @PutMapping("/admin/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Task> updateAnyTask(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", required = true, example = "1")
            @PathVariable Long id,
            @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.", required = true,
                    content = @Content(schema = @Schema(implementation = UpdateTaskDTO.class))
            )
            @RequestBody @Valid UpdateTaskDTO updateTaskDTO
    ) {
        log.info("üì¢ –í—ã–∑–æ–≤ PUT /api/tasks/admin/{}: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∞–¥–º–∏–Ω).", id);
        Task updatedTask = taskService.updateAnyTask(id, updateTaskDTO);
        return ResponseEntity.ok(updatedTask);
    }
}