package com.example.taskmanagement.controller;

import com.example.taskmanagement.config.UserDetail;
import com.example.taskmanagement.dto.*;
import com.example.taskmanagement.model.AppUser;
import com.example.taskmanagement.model.Role;
import com.example.taskmanagement.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

/**
 * <p><b>–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π</b></p>
 * <p>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∏—Ö –¥–æ—Å—Ç—É–ø–æ–º.</p>
 * <p>
 *     –≠—Ç–æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–ª—É–∂–∏—Ç —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –¥–ª—è:
 *     <ul>
 *         <li>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</li>
 *         <li>–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–¥–∞—á–∏ JWT —Ç–æ–∫–µ–Ω–∞.</li>
 *         <li>–ü–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.</li>
 *         <li>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–æ—Å–º–æ—Ç—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π, —É–¥–∞–ª–µ–Ω–∏–µ) ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN.</li>
 *     </ul>
 * </p>
 */
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/users")
@Tag(name = "1.üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", description = """
    ### API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω—ã–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª API –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—Å—ë, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —É—á–µ—Ç–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏:
    *   **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è** –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚ú®.
    *   **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è** (–ª–æ–≥–∏–Ω) –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT üîë.
    *   **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ** –ø—Ä–æ—Ñ–∏–ª–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è) üîÑ.
    *   **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ** –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–ª–∏ `ADMIN`) üëë.
    
    ---
    **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: –í—Å–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç `Bearer` —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç `/login`.
    """)
public class UserController {

    private final UserService userService;
    private final ModelMapper modelMapper;

    // --- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö ---
    private static final String ERROR_400_INVALID_DATA_EXAMPLE = """
            {
                "timestamp": "2023-10-27T10:30:00.123Z",
                "status": 400,
                "error": "Bad Request",
                "message": "Validation failed for object='userRegistrationRequest'. Error count: 1",
                "details": [
                    {
                        "field": "password",
                        "message": "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                    }
                ],
                "path": "/api/users/register"
            }
            """;
    private static final String ERROR_400_WRONG_OLD_PASSWORD_EXAMPLE = """
            {
                "timestamp": "2023-10-27T10:30:00.123Z",
                "status": 400,
                "error": "Bad Request",
                "message": "USR-003: –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å",
                "path": "/api/users/me/password"
            }
            """;
    private static final String ERROR_401_UNAUTHORIZED_EXAMPLE = """
            {
                "timestamp": "2023-10-27T10:30:00.123Z",
                "status": 401,
                "error": "Unauthorized",
                "message": "AUTH-001: –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
                "path": "/api/users/login"
            }
            """;
    private static final String ERROR_403_FORBIDDEN_EXAMPLE = """
            {
                "timestamp": "2023-10-27T10:30:00.123Z",
                "status": 403,
                "error": "Forbidden",
                "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
                "path": "/api/users/admin/users"
            }
            """;
    private static final String ERROR_404_USER_NOT_FOUND_EXAMPLE = """
            {
                "timestamp": "2023-10-27T10:30:00.123Z",
                "status": 404,
                "error": "Not Found",
                "message": "USR-002: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 999 –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "path": "/api/users/admin/users/999"
            }
            """;
    private static final String ERROR_409_EMAIL_CONFLICT_EXAMPLE = """
            {
                "timestamp": "2023-10-27T10:30:00.123Z",
                "status": 409,
                "error": "Conflict",
                "message": "USR-001: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                "path": "/api/users/register"
            }
            """;
    private static final String ERROR_409_PASSWORD_MATCH_EXAMPLE = """
            {
                "timestamp": "2023-10-27T10:30:00.123Z",
                "status": 409,
                "error": "Conflict",
                "message": "USR-004: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º",
                "path": "/api/users/me/password"
            }
            """;


    @Operation(
            summary = "‚ú® –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            description = """
            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.
            - –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ–º –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —Ä–æ–ª—å `USER`.
            - –ü–æ–ª–µ `email` –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –∏–º–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
            - –ü–æ–ª–µ `password` –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –±—ã—Ç—å –ø—É—Å—Ç—ã–º).
            """
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "201",
                    description = """
                    ‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.**
                    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                    –í –∑–∞–≥–æ–ª–æ–≤–∫–µ `Location` —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è URI –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.
                    """,
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = AllUserDTO.class))
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.** –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –∑–∞–ø—Ä–æ—Å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(name = "–ü—Ä–∏–º–µ—Ä –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", value = ERROR_400_INVALID_DATA_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "409",
                    description = "‚ùå **–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö.** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º `email` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `USR-001`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(name = "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ email", value = ERROR_409_EMAIL_CONFLICT_EXAMPLE))
            )
    })
    @PostMapping("/register")
    public ResponseEntity<AllUserDTO> registerUser(
            @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–∫–ª—é—á–∞–µ—Ç `email` –∏ `password`.",
                    required = true,
                    content = @Content(schema = @Schema(implementation = UserRegistrationRequest.class, example = "{\"email\": \"new.user@example.com\", \"password\": \"strongPassword123\"}"))
            )
            @Valid @RequestBody UserRegistrationRequest request
    ) {
        AppUser newUser = modelMapper.map(request, AppUser.class);
        newUser.setRole(Role.USER);
        AppUser createdUser = userService.registerUser(newUser);
        URI location = URI.create(String.format("/api/users/%s", createdUser.getId()));
        return ResponseEntity.created(location).body(modelMapper.map(createdUser, AllUserDTO.class));
    }

    @Operation(
            summary = "üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω)",
            description = """
            –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (`email` –∏ `password`).
            –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç **JSON Web Token (JWT)**, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º.
            
            –¢–æ–∫–µ–Ω —Å–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ `Authorization` –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
            `Authorization: Bearer <–≤–∞—à_—Ç–æ–∫–µ–Ω>`
            """
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.",
                    content = @Content(mediaType = MediaType.TEXT_PLAIN_VALUE, schema = @Schema(type = "string", example = "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjE2MjM5MDIyLCJleHAiOjE2MTYyNDI2MjJ9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå **–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.** –ù–µ–≤–µ—Ä–Ω—ã–π `email` –∏–ª–∏ `password`. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `AUTH-001`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            )
    })
    @PostMapping("/login")
    public ResponseEntity<String> login(
            @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.",
                    required = true,
                    content = @Content(schema = @Schema(implementation = AuthRequest.class, example = "{\"email\": \"user@example.com\", \"password\": \"password123\"}"))
            )
            @Valid @RequestBody AuthRequest authRequest
    ) {
        String token = userService.authenticateUser(authRequest.getEmail(), authRequest.getPassword());
        return ResponseEntity.ok(token);
    }

    @Operation(
            summary = "üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
            description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, —á–µ–π JWT —Ç–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
            –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "‚úÖ **–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.**",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = AppUser.class))),
            @ApiResponse(responseCode = "401", description = "‚ùå **–ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.** –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π JWT —Ç–æ–∫–µ–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE)))
    })
    @GetMapping("/me")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<AppUser> getCurrentUser(@AuthenticationPrincipal UserDetail userDetail) {
        return ResponseEntity.ok(modelMapper.map(userDetail.appUser(), AppUser.class));
    }

    @Operation(
            summary = "üîÑ –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            description = """
            –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å.
            - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å `oldPassword` (—Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å) –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
            - `newPassword` –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º.
            - `newPassword` –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(responseCode = "204", description = "‚úÖ **–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.** –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –ø—É—Å—Ç–æ–µ."),
            @ApiResponse(responseCode = "400", description = "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.** –õ–∏–±–æ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è, –ª–∏–±–æ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å (–ö–æ–¥ –æ—à–∏–±–∫–∏: `USR-003`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = {
                            @ExampleObject(name = "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å", value = ERROR_400_WRONG_OLD_PASSWORD_EXAMPLE),
                            @ExampleObject(name = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", value = ERROR_400_INVALID_DATA_EXAMPLE)
                    })
            ),
            @ApiResponse(responseCode = "401", description = "‚ùå **–ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.**",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))),
            @ApiResponse(responseCode = "409", description = "‚ùå **–ö–æ–Ω—Ñ–ª–∏–∫—Ç.** –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å—Ç–∞—Ä—ã–º. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `USR-004`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_409_PASSWORD_MATCH_EXAMPLE)))
    })
    @PatchMapping("/me/password")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<Void> updatePassword(
            @AuthenticationPrincipal UserDetail userDetail,
            @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª–∏.",
                    required = true,
                    content = @Content(schema = @Schema(implementation = UpdatePasswordRequest.class))
            )
            @Valid @RequestBody UpdatePasswordRequest request
    ) {
        userService.updatePassword(userDetail.appUser().getEmail(), request.getOldPassword(), request.getNewPassword());
        return ResponseEntity.noContent().build();
    }

    @Operation(
            summary = "üëë [ADMIN] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.
            <b>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—å—é `ADMIN`</b>.
            
            *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã –ø—Ä–∏–º–µ–Ω—è–ª–∞—Å—å –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.*
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "‚úÖ **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.**",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, array = @ArraySchema(schema = @Schema(implementation = AllUserDTO.class)))),
            @ApiResponse(responseCode = "401", description = "‚ùå **–ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.**",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))),
            @ApiResponse(responseCode = "403", description = "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.** –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ `ADMIN`.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_403_FORBIDDEN_EXAMPLE)))
    })
    @GetMapping("/admin/users")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<AllUserDTO>> getAllUsers() {
        List<AllUserDTO> users = userService.getAllUserEmailsAndIds();
        return ResponseEntity.ok(users);
    }

    @Operation(
            summary = "üëë [ADMIN] –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID",
            description = """
            –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª—è–µ—Ç —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID.
            <b>–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.</b>
            <b>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—å—é `ADMIN`</b>.
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.** –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–ª–∞, —Ç–∞–∫ –∫–∞–∫ —Ä–µ—Å—É—Ä—Å –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."),
            @ApiResponse(responseCode = "401", description = "‚ùå **–ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.**",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))),
            @ApiResponse(responseCode = "403", description = "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.**",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_403_FORBIDDEN_EXAMPLE))),
            @ApiResponse(responseCode = "404", description = "‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `USR-002`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_404_USER_NOT_FOUND_EXAMPLE)))
    })
    @DeleteMapping("/admin/users/{userId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deleteUser(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å.", required = true, example = "101")
            @PathVariable Long userId
    ) {
        userService.deleteUser(userId);
        return ResponseEntity.noContent().build();
    }
}