package com.example.taskmanagement.controller;

import com.example.taskmanagement.config.UserDetail;
import com.example.taskmanagement.dto.CommentDTO;
import com.example.taskmanagement.dto.CreateCommentDTO;
import com.example.taskmanagement.dto.UpdateCommentDTO;
import com.example.taskmanagement.service.CommentService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;
import java.util.stream.Collectors;

/**
 * <p><b>–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ üí¨</b></p>
 * <p>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∫ –∑–∞–¥–∞—á–∞–º.</p>
 * <p>
 *     –≠—Ç–æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 *     <ul>
 *         <li>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∑–∞–¥–∞—á–∞–º.</li>
 *         <li>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.</li>
 *         <li>–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).</li>
 *         <li>–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏.</li>
 *     </ul>
 * </p>
 */
@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "3. üí¨  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", description = """
    ### API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∫ –∑–∞–¥–∞—á–∞–º.
    *   **–°–æ–∑–¥–∞–Ω–∏–µ** –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ª—é–±–æ–π –∑–∞–¥–∞—á–µ ‚ûï.
    *   **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ‚úèÔ∏è.
    *   **–£–¥–∞–ª–µ–Ω–∏–µ** —Å–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –ª—é–±—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–¥–ª—è `ADMIN`) üóëÔ∏è.
    *   **–ü–æ–ª—É—á–µ–Ω–∏–µ** –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ üìã.
    """)
public class CommentController {

    private final CommentService commentService;

    private static final String ERROR_400_INVALID_DATA_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 400,
                "error": "Bad Request",
                "message": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—è –∑–∞–ø—Ä–æ—Å–∞.",
                "details": [
                    {
                        "field": "text",
                        "message": "–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
                    }
                ],
                "path": "/api/tasks/1/comments"
            }
            """;

    private static final String ERROR_401_UNAUTHORIZED_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 401,
                "error": "Unauthorized",
                "message": "AUTH-001: –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.",
                "path": "/api/tasks/1/comments"
            }
            """;

    private static final String ERROR_403_COMMENT_ACCESS_DENIED_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 403,
                "error": "Forbidden",
                "message": "CMT-002: –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.",
                "path": "/api/comments/101"
            }
            """;

    private static final String ERROR_403_ADMIN_ACCESS_DENIED_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 403,
                "error": "Forbidden",
                "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
                "path": "/api/comments/101"
            }
            """;


    private static final String ERROR_404_TASK_NOT_FOUND_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 404,
                "error": "Not Found",
                "message": "TASK-001: –ó–∞–¥–∞—á–∞ —Å ID 999 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                "path": "/api/tasks/999/comments"
            }
            """;

    private static final String ERROR_404_COMMENT_NOT_FOUND_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 404,
                "error": "Not Found",
                "message": "CMT-001: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID 999 –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                "path": "/api/comments/999"
            }
            """;

    private static final String ERROR_404_USER_NOT_FOUND_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 404,
                "error": "Not Found",
                "message": "USR-002: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                "path": "/api/tasks/1/comments"
            }
            """;


    private static final String ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE = """
            {
                "timestamp": "%s",
                "status": 500,
                "error": "Internal Server Error",
                "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
                "path": "/api/tasks/1/comments"
            }
            """;


    @Operation(
            summary = "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ",
            description = """
            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ. –ê–≤—Ç–æ—Ä–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–µ–∫—É—â–∏–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "201",
                    description = "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = CommentDTO.class))
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_400_INVALID_DATA_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π JWT —Ç–æ–∫–µ–Ω. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `AUTH-001`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-001` –∏–ª–∏ `USR-002`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = {
                            @ExampleObject(name = "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", value = ERROR_404_TASK_NOT_FOUND_EXAMPLE),
                            @ExampleObject(name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", value = ERROR_404_USER_NOT_FOUND_EXAMPLE)
                    })
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @PostMapping("/tasks/{taskId}/comments")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<CommentDTO> createComment(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.", required = true, example = "1")
            @PathVariable long taskId,
            @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (—Ç–µ–∫—Å—Ç).", required = true,
                    content = @Content(schema = @Schema(implementation = CreateCommentDTO.class))
            )
            @Valid @RequestBody CreateCommentDTO createCommentDTO,
            @AuthenticationPrincipal UserDetail userDetail
    ) {
        log.info("üì¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ ID: {} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}'.", taskId, userDetail.getUsername());
        CommentDTO createdComment = commentService.createComment(taskId, createCommentDTO.getText(), userDetail.getUsername());
        URI location = URI.create(String.format("/api/comments/%s", createdComment.getId())); // –ü—Ä–∏–º–µ—Ä URI –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        return ResponseEntity.created(location).body(createdComment);
    }

    @Operation(
            summary = "‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
            description = """
            –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
            **–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–æ–∂–µ—Ç –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.**
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = CommentDTO.class))
            ),
            @ApiResponse(
                    responseCode = "400",
                    description = "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Å—Ç–æ–π –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_400_INVALID_DATA_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "403",
                    description = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `CMT-002`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_403_COMMENT_ACCESS_DENIED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `CMT-001`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_404_COMMENT_NOT_FOUND_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @PutMapping("/comments/{commentId}")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<CommentDTO> updateComment(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", required = true, example = "101")
            @PathVariable long commentId,
            @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç).", required = true,
                    content = @Content(schema = @Schema(implementation = UpdateCommentDTO.class))
            )
            @Valid @RequestBody UpdateCommentDTO updateCommentDTO,
            @AuthenticationPrincipal UserDetail userDetail
    ) {
        log.info("üì¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ID: {} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}'.", commentId, userDetail.getUsername());
        CommentDTO updatedComment = commentService.updateComment(commentId, updateCommentDTO.getText(), userDetail.getUsername());
        return ResponseEntity.ok(updatedComment);
    }

    @Operation(
            summary = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
            description = """
            –£–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –µ–≥–æ ID.
            **–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é `ADMIN` –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.**
            –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "204",
                    description = "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –ø—É—Å—Ç–æ–µ."
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "403",
                    description = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `CMT-002` –∏–ª–∏ –æ–±—â–∏–π 403 –æ—Ç Spring Security).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = {
                            @ExampleObject(name = "–î–æ—Å—Ç—É–ø –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –∑–∞–ø—Ä–µ—â–µ–Ω", value = ERROR_403_COMMENT_ACCESS_DENIED_EXAMPLE),
                            @ExampleObject(name = "–ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", value = ERROR_403_ADMIN_ACCESS_DENIED_EXAMPLE)
                    })
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `CMT-001`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_404_COMMENT_NOT_FOUND_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @DeleteMapping("/comments/{commentId}")
    @PreAuthorize("isAuthenticated()") // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –∞ —Å–µ—Ä–≤–∏—Å –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø—Ä–∞–≤–∞
    public ResponseEntity<Void> deleteComment(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", required = true, example = "101")
            @PathVariable long commentId,
            @AuthenticationPrincipal UserDetail userDetail
    ) {
        log.info("üì¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ID: {} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{}'.", commentId, userDetail.getUsername());
        List<String> roles = userDetail.getAuthorities().stream()
                .map(grantedAuthority -> grantedAuthority.getAuthority()) // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ (–Ω–∞–ø—Ä., "ROLE_ADMIN")
                .collect(Collectors.toList());
        commentService.deleteComment(commentId, userDetail.getUsername(), roles);
        return ResponseEntity.noContent().build();
    }

    @Operation(
            summary = "üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ",
            description = """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è.
            """,
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = CommentDTO.class, type = "array"))
            ),
            @ApiResponse(
                    responseCode = "401",
                    description = "‚ùå –ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_401_UNAUTHORIZED_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "404",
                    description = "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. (–ö–æ–¥ –æ—à–∏–±–∫–∏: `TASK-001`).",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_404_TASK_NOT_FOUND_EXAMPLE))
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.",
                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, examples = @ExampleObject(value = ERROR_500_INTERNAL_SERVER_ERROR_EXAMPLE))
            )
    })
    @GetMapping("/tasks/{taskId}/comments")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<List<CommentDTO>> getCommentsForTask(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.", required = true, example = "1")
            @PathVariable long taskId
    ) {
        log.info("üì¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ ID: {}.", taskId);
        List<CommentDTO> comments = commentService.getCommentsByTaskId(taskId);
        return ResponseEntity.ok(comments);
    }
}